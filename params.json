{"name":"Auto Spark","tagline":"Alternative way to use Spark","body":"Auto Spark\r\n----------\r\n\r\nAuto Spark is an alternative way to use [Spark][spark]. This example assumes you have a basic understanding of how to use Spark.\r\n\r\n###Downloads\r\n\r\n**Maven**\r\n\r\n```xml\r\n<dependency>\r\n\t<groupId>com.alta189</groupId>\r\n\t<artifactId>auto-spark</artifactId>\r\n\t<version>1.0</version>\r\n</dependency>\r\n```\r\n\r\n**Gradle**\r\n\r\n```gradle\r\n'com.alta189:auto-spark:1.0'\r\n```\r\n\r\nYou can also download the jars [here][releases].\r\n\r\n###Getting Started\r\n\r\nExampleServer.java\r\n\r\n```java\r\nimport com.alta189.auto.spark.AutoSpark;\r\n\r\npublic class ExampleServer {\r\n\tpublic static void main(String[] args) {\r\n\t\tnew AutoSpark().run();\r\n\t}\r\n}\r\n```\r\n\r\nHelloWorld.java\r\n\r\n```java\r\nimport com.alta189.auto.spark.Controller;\r\nimport com.alta189.auto.spark.ResourceMapping;\r\nimport spark.Request;\r\nimport spark.Response;\r\n\r\n@Controller\r\npublic class HelloWorld {\r\n\t@ResourceMapping(\"/hello\")\r\n\tpublic String hello(Request request, Response response) {\r\n\t\treturn \"Hello, World!\";\r\n\t}\r\n}\r\n```\r\n\r\nView at: http://localhost:4567/hello\r\n\r\n###Examples\r\n\r\nExampleController.java\r\n\r\n```java\r\nimport com.alta189.auto.spark.Controller;\r\nimport com.alta189.auto.spark.RequestMethod;\r\nimport com.alta189.auto.spark.ResourceMapping;\r\nimport spark.Request;\r\nimport spark.Response;\r\n\r\n@Controller\r\npublic class ExampleController {\r\n\t@ResourceMapping(value = \"/users/add\", method = RequestMethod.PUT)\r\n\tpublic String addUser(Request request, Response response) {\r\n\t\t// Internal Logic\r\n\t}\r\n\t\r\n\t@ResourceMapping(value = \"/users/update\", method = RequestMethod.POST)\r\n\tpublic String updateUser(Request request, Response response) {\r\n\t\t// Internal Logic\r\n\t}\r\n\t\r\n\t@ResourceMapping(value = \"/users/delete\", method = RequestMethod.DELETE)\r\n\tpublic String deleteUser(Request request, Response response) {\r\n\t\t// Internal Logic\r\n\t}\r\n\t\r\n\t@ResourceMapping(value = \"/users/list\", method = RequestMethod.GET)\r\n\tpublic String listUsers(Request request, Response response) {\r\n\t\t// Internal Logic\r\n\t}\r\n}\r\n```\r\n\r\nYou could also simplify each methods ```@ResourceMapping``` by removing the ```/users``` from each and adding ```@ResourceMapping(\"/users\")``` to the class.\r\n\r\n\r\n----\r\n\r\n\r\nResult.java\r\n\r\n```java\r\nimport com.alta189.auto.spark.AutoSparkUtils;\r\nimport com.alta189.auto.spark.SparkResponseTransformer;\r\n\r\npublic class Result {\r\n\tprivate final String result;\r\n\r\n\tpublic Result(String result) {\r\n\t\tthis.result = result;\r\n\t}\r\n\r\n\tpublic String getResult() {\r\n\t\treturn \"{ \\\"result\\\" : \\\"\" + result + \"\\\" }\";\r\n\t}\r\n\r\n\tpublic static class ResultTransformer extends SparkResponseTransformer {\r\n\t\t@Override\r\n\t\tpublic String render(Object model) throws Exception {\r\n\t\t\tResult result = AutoSparkUtils.safeCast(model);\r\n\t\t\tif (result == null) {\r\n\t\t\t\tthrow new IllegalAccessException(\"result null\");\r\n\t\t\t}\r\n\t\t\treturn result.getResult();\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nTransformerExample.java\r\n\r\n```java\r\nimport com.alta189.auto.spark.Controller;\r\nimport com.alta189.auto.spark.ResourceMapping;\r\nimport com.alta189.auto.spark.Transformer;\r\nimport spark.Request;\r\nimport spark.Response;\r\n\r\n@Controller\r\npublic class TransformerExample {\r\n\t@Transformer(Result.ResultTransformer.class)\r\n\t@ResourceMapping(\"/status\")\r\n\tpublic Result status(Request request, Response response) {\r\n\t\treturn new Result(\"online\");\r\n\t}\r\n\r\n\t@Transformer(Result.ResultTransformer.class)\r\n\t@ResourceMapping(\"/health\")\r\n\tpublic Result health(Request request, Response response) {\r\n\t\treturn new Result(\"good\");\r\n\t}\r\n\t\r\n\t@ResourceMapping(\"/hello\")\r\n\tpublic String hello(Request request, Response response) {\r\n\t\treturn \"Hello, World!\";\r\n\t}\r\n}\r\n\r\n```\r\n\r\nYou can simplify this class by declaring the Transformer to be for the entire class and setting the ```/hello``` resource to ignore the parent transformer as seen below\r\n\r\n```java\r\nimport com.alta189.auto.spark.Controller;\r\nimport com.alta189.auto.spark.ResourceMapping;\r\nimport com.alta189.auto.spark.Transformer;\r\nimport spark.Request;\r\nimport spark.Response;\r\n\r\n@Controller\r\n@Transformer(Result.ResultTransformer.class)\r\npublic class TransformerExample {\r\n\t@ResourceMapping(\"/status\")\r\n\tpublic Result status(Request request, Response response) {\r\n\t\treturn new Result(\"online\");\r\n\t}\r\n\t\r\n\t@ResourceMapping(\"/health\")\r\n\tpublic Result health(Request request, Response response) {\r\n\t\treturn new Result(\"good\");\r\n\t}\r\n\t\r\n\t@Transformer(ignoreParent = true)\r\n\t@ResourceMapping(\"/hello\")\r\n\tpublic String hello(Request request, Response response) {\r\n\t\treturn \"Hello, World!\";\r\n\t}\r\n}\r\n```\r\n\r\n---\r\n\r\nhello.ftl\r\n\r\n```html\r\n<h1>Hello, ${message}!</h1>\r\n```\r\n\r\nTemplateEngineExample.java\r\n\r\n```java\r\nimport com.alta189.auto.spark.ResourceMapping;\r\nimport com.alta189.auto.spark.TemplateEngine;\r\nimport spark.ModelAndView;\r\nimport spark.Request;\r\nimport spark.Response;\r\nimport spark.utils.StringUtils;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class TemplateEngineExample {\r\n\t@ResourceMapping(\"/hello/:message\")\r\n\t@TemplateEngine(FreeMarkerEngine.class)\r\n\tpublic ModelAndView template(Request request, Response response) {\r\n\t\tMap<String, Object> attributes = new HashMap<>();\r\n\t\tString message = request.params(\"message\");\r\n\t\tif (StringUtils.isEmpty(message)) {\r\n\t\t\tmessage = \"World\";\r\n\t\t}\r\n\t\tattributes.put(\"message\", message);\r\n\t\treturn new ModelAndView(attributes, \"hello.ftl\");\r\n\t}\r\n}\r\n```\r\n\r\nJust like ```@Transformer``` a template engine can be set at the class level and then ignored at the method level.\r\n\r\n\r\n---\r\n\r\n\r\nExceptionExample.java\r\n\r\n```java\r\nimport com.alta189.auto.spark.Controller;\r\nimport com.alta189.auto.spark.ExceptionMapping;\r\nimport spark.Request;\r\nimport spark.Response;\r\n\r\n@Controller\r\npublic class ExceptionExample {\r\n\t@ExceptionMapping(NotFoundException.class)\r\n\tpublic void notFound(Request request, Response response) {\r\n\t\tresponse.status(404);\r\n\t\tresponse.body(\"Resource not found\");\r\n\t}\r\n\r\n\t@ExceptionMapping(NullPointerException.class)\r\n\tpublic void notFound(Request request, Response response) {\r\n\t\tresponse.status(404);\r\n\t\tresponse.body(\"Oops! Looks like something was broken!\");\r\n\t}\r\n}\r\n```\r\n\r\n\r\n---\r\n\r\n\r\nFilterExample.java\r\n\r\n```java\r\nimport com.alta189.auto.spark.SparkFilter;\r\nimport spark.Request;\r\nimport spark.Response;\r\n\r\npublic class FilterExample extends SparkFilter {\r\n\t@Override\r\n\tpublic void before(Request request, Response response) {\r\n\t\t// Before the Request is handled\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void after(Request request, Response response) {\r\n\t\t// After the Request is handled\r\n\t}\r\n}\r\n```\r\n\r\nAdding ```@FilterMapping(\"/api/*\")``` to the Class would limit the filter to only paths starting with ```/api/```.\r\n\r\n\r\n[spark]: http://sparkjava.com\r\n[releases]: https://github.com/alta189/Auto-Spark/releases\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}